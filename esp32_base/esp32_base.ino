#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT   61
#define LOGO_WIDTH    107

const uint8_t charge_bmp [] PROGMEM = {
0x06, 0x0A, 0x12, 0x24, 0x44, 0x88, 0xEE, 0x22, 0x44, 0x48, 0x90, 0xA0, 0xC0, 0x00, 0x00, 0x00
};

const uint8_t bat_body_bpm [] PROGMEM = {
0x3F, 0xFF, 0xFE, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0,
0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00,
0x01, 0x40, 0x00, 0x01, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t bat_cell_bpm [] PROGMEM = {
0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char logo_bmp [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x0f, 0x0f, 0x88, 0x41, 0xe1, 0xf9, 0xf2, 
	0x08, 0x00, 0x00, 0x00, 0x6f, 0x52, 0xf6, 0x30, 0x90, 0x48, 0x46, 0x1a, 0x0a, 0x0a, 0x08, 0x00, 
	0x00, 0x00, 0x60, 0x12, 0x0e, 0x20, 0x10, 0x48, 0x44, 0x0a, 0x0a, 0x09, 0xf8, 0x00, 0x00, 0x00, 
	0x76, 0xad, 0x6e, 0x1f, 0x80, 0x48, 0x44, 0x0b, 0xfa, 0x09, 0x08, 0x00, 0x00, 0x00, 0x78, 0x2c, 
	0x1e, 0x00, 0x90, 0x48, 0x44, 0x0a, 0x0a, 0x0a, 0x08, 0x00, 0x00, 0x00, 0x79, 0x5e, 0x9e, 0x10, 
	0x90, 0x48, 0x46, 0x1a, 0x0a, 0x0a, 0x08, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x0f, 0x0f, 0x8b, 
	0xf1, 0xe1, 0xf1, 0xf1, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfa, 0x7c, 0x04, 0x0a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x04, 0x0a, 0x04, 0x04, 0x09, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x05, 0xfa, 0x05, 0xfd, 0xf9, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 
	0x0a, 0x05, 0x05, 0x08, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x0a, 0x05, 
	0x05, 0x08, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfa, 0x04, 0xfd, 0xf8, 
	0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 
	0x80, 0x00, 0x7c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xc0, 0x00, 
	0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xf0, 0x00, 0x07, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 
	0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x0f, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xf0, 0x00, 0x07, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x9d, 0xce, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xf8, 0x0f, 0xed, 0x9f, 0x80, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfc, 0x1f, 0xf0, 0x7f, 0xc1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
	0x7f, 0xfd, 0xff, 0xf7, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x7f, 0xf0, 
	0x7f, 0xf7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x7f, 0xc0, 0x1f, 0xf7, 
	0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x80, 0x0f, 0xf7, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7e, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x78, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup(void)
{
  pinMode(2, OUTPUT);
  digitalWrite(2, HIGH);
  
  Serial1.begin(115200, SERIAL_8N1, 22, 23);
  Serial.begin(115200);

  Wire.begin(5, 18);

  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);

  display.clearDisplay();
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    4,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1
  );
  display.setRotation(2);
  display.setTextSize(2);             
  display.setTextColor(WHITE);
  // display.setCursor(0,48);        
  // display.println("time test");
  display.display();
}

uint8_t counter = 0;
char buf[20] = {0};

void loop(void)
{
  if (Serial1.available())
  {
    // uint8_t temp = Serial1.read();
    Serial1.readBytesUntil('\r', buf, 100);
    Serial.write(buf);

    // if (temp == 'V')
    // {
    //   counter = 0;
    //   buf[counter] = temp;
    // }
    // else if (temp == 'B' && counter == 1)
    // {
    //   buf[1] = temp;
    // }
    // else if (temp == 'A' && counter == 2)
    // {
    //   buf[2] = temp;
    // }
    // else if (temp == 'T' && counter == 3)
    // {
    //   buf[3] = temp;
    // }
    // else
    // {
    //   memset(buf, 0, 4);
    // }
    // counter = counter > 100 ? 0 : counter + 1;
    if (strncmp(buf, "VBAT", 4) == 0)
    {
      // Serial.write(buf);
      uint16_t volt_bat = 0;
      uint8_t state_charge = 0;
      sscanf(buf, "VBAT %hu %hhu", &volt_bat, &state_charge);
      Serial.println(volt_bat);
      uint8_t x = 90;
      uint8_t y = 0;
      display.drawBitmap(x, y, charge_bmp, 8, 16, (state_charge == 0));

      display.drawBitmap(x + 10, y, bat_body_bpm, 24, 16, 1);
      display.drawBitmap(x + 13, y, bat_cell_bpm, 8, 16, (volt_bat > 3200));
      display.drawBitmap(x + 18, y, bat_cell_bpm, 8, 16, (volt_bat > 3500));
      display.drawBitmap(x + 23, y, bat_cell_bpm, 8, 16, (volt_bat > 3800));
      display.drawBitmap(x + 28, y, bat_cell_bpm, 8, 16, (volt_bat > 4000));
      display.display();
    }
  }

  if (Serial.available())
  {
    Serial1.write(Serial.read());
  }
}
